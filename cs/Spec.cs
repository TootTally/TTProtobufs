// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: spec.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace TTSpecProtobuf {

  /// <summary>Holder for reflection information generated from spec.proto</summary>
  public static partial class SpecReflection {

    #region Descriptor
    /// <summary>File descriptor for spec.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SpecReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpzcGVjLnByb3RvEg5UVFNwZWNQcm90b2J1ZiJUCghTb25nSW5mbxIQCgh0",
            "cmFja1JlZhgBIAEoCRIOCgZzb25nSUQYAiABKAMSEQoJZ2FtZVNwZWVkGAMg",
            "ASgCEhMKC3Njcm9sbFNwZWVkGAQgASgCIksKCUZyYW1lRGF0YRISCgpub3Rl",
            "SG9sZGVyGAEgASgCEhcKD3BvaW50ZXJQb3NpdGlvbhgCIAEoAhIRCglpc1Rv",
            "b3RpbmcYAyABKAhiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::TTSpecProtobuf.SongInfo), global::TTSpecProtobuf.SongInfo.Parser, new[]{ "TrackRef", "SongID", "GameSpeed", "ScrollSpeed" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TTSpecProtobuf.FrameData), global::TTSpecProtobuf.FrameData.Parser, new[]{ "NoteHolder", "PointerPosition", "IsTooting" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SongInfo : pb::IMessage<SongInfo> {
    private static readonly pb::MessageParser<SongInfo> _parser = new pb::MessageParser<SongInfo>(() => new SongInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SongInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTSpecProtobuf.SpecReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SongInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SongInfo(SongInfo other) : this() {
      trackRef_ = other.trackRef_;
      songID_ = other.songID_;
      gameSpeed_ = other.gameSpeed_;
      scrollSpeed_ = other.scrollSpeed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SongInfo Clone() {
      return new SongInfo(this);
    }

    /// <summary>Field number for the "trackRef" field.</summary>
    public const int TrackRefFieldNumber = 1;
    private string trackRef_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TrackRef {
      get { return trackRef_; }
      set {
        trackRef_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "songID" field.</summary>
    public const int SongIDFieldNumber = 2;
    private long songID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SongID {
      get { return songID_; }
      set {
        songID_ = value;
      }
    }

    /// <summary>Field number for the "gameSpeed" field.</summary>
    public const int GameSpeedFieldNumber = 3;
    private float gameSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GameSpeed {
      get { return gameSpeed_; }
      set {
        gameSpeed_ = value;
      }
    }

    /// <summary>Field number for the "scrollSpeed" field.</summary>
    public const int ScrollSpeedFieldNumber = 4;
    private float scrollSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ScrollSpeed {
      get { return scrollSpeed_; }
      set {
        scrollSpeed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SongInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SongInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TrackRef != other.TrackRef) return false;
      if (SongID != other.SongID) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GameSpeed, other.GameSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ScrollSpeed, other.ScrollSpeed)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TrackRef.Length != 0) hash ^= TrackRef.GetHashCode();
      if (SongID != 0L) hash ^= SongID.GetHashCode();
      if (GameSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GameSpeed);
      if (ScrollSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ScrollSpeed);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TrackRef.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TrackRef);
      }
      if (SongID != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(SongID);
      }
      if (GameSpeed != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(GameSpeed);
      }
      if (ScrollSpeed != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(ScrollSpeed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TrackRef.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TrackRef);
      }
      if (SongID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SongID);
      }
      if (GameSpeed != 0F) {
        size += 1 + 4;
      }
      if (ScrollSpeed != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SongInfo other) {
      if (other == null) {
        return;
      }
      if (other.TrackRef.Length != 0) {
        TrackRef = other.TrackRef;
      }
      if (other.SongID != 0L) {
        SongID = other.SongID;
      }
      if (other.GameSpeed != 0F) {
        GameSpeed = other.GameSpeed;
      }
      if (other.ScrollSpeed != 0F) {
        ScrollSpeed = other.ScrollSpeed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TrackRef = input.ReadString();
            break;
          }
          case 16: {
            SongID = input.ReadInt64();
            break;
          }
          case 29: {
            GameSpeed = input.ReadFloat();
            break;
          }
          case 37: {
            ScrollSpeed = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FrameData : pb::IMessage<FrameData> {
    private static readonly pb::MessageParser<FrameData> _parser = new pb::MessageParser<FrameData>(() => new FrameData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FrameData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TTSpecProtobuf.SpecReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameData(FrameData other) : this() {
      noteHolder_ = other.noteHolder_;
      pointerPosition_ = other.pointerPosition_;
      isTooting_ = other.isTooting_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameData Clone() {
      return new FrameData(this);
    }

    /// <summary>Field number for the "noteHolder" field.</summary>
    public const int NoteHolderFieldNumber = 1;
    private float noteHolder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float NoteHolder {
      get { return noteHolder_; }
      set {
        noteHolder_ = value;
      }
    }

    /// <summary>Field number for the "pointerPosition" field.</summary>
    public const int PointerPositionFieldNumber = 2;
    private float pointerPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PointerPosition {
      get { return pointerPosition_; }
      set {
        pointerPosition_ = value;
      }
    }

    /// <summary>Field number for the "isTooting" field.</summary>
    public const int IsTootingFieldNumber = 3;
    private bool isTooting_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTooting {
      get { return isTooting_; }
      set {
        isTooting_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FrameData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FrameData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NoteHolder, other.NoteHolder)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PointerPosition, other.PointerPosition)) return false;
      if (IsTooting != other.IsTooting) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NoteHolder != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NoteHolder);
      if (PointerPosition != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PointerPosition);
      if (IsTooting != false) hash ^= IsTooting.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NoteHolder != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(NoteHolder);
      }
      if (PointerPosition != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(PointerPosition);
      }
      if (IsTooting != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsTooting);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NoteHolder != 0F) {
        size += 1 + 4;
      }
      if (PointerPosition != 0F) {
        size += 1 + 4;
      }
      if (IsTooting != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FrameData other) {
      if (other == null) {
        return;
      }
      if (other.NoteHolder != 0F) {
        NoteHolder = other.NoteHolder;
      }
      if (other.PointerPosition != 0F) {
        PointerPosition = other.PointerPosition;
      }
      if (other.IsTooting != false) {
        IsTooting = other.IsTooting;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            NoteHolder = input.ReadFloat();
            break;
          }
          case 21: {
            PointerPosition = input.ReadFloat();
            break;
          }
          case 24: {
            IsTooting = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
